/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bankminiproject;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author rudan
 */
public class Withdrawal extends javax.swing.JFrame {
    existingCustomer user;
    Connection con;
    Menu mn;
    int SavingsWithdrawLimit;
    Double OverdraftLimit, InterestRate;
    /**
     * Creates new form Withdrawal
     */
    public Withdrawal(existingCustomer user,Connection con,Menu mn) {
        this.mn = mn;
        this.con = con;
        this.user = user;
        initComponents();
        balancelbl.setText("Balance : " + user.Balance);
    }
    public Withdrawal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        balancelbl = new javax.swing.JLabel();
        amountlbl = new javax.swing.JLabel();
        amounttxt = new javax.swing.JTextField();
        withdrawbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        balancelbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        balancelbl.setText("Balance : ");

        amountlbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        amountlbl.setText("Enter the amount to be withdraw :");

        amounttxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        withdrawbtn.setText("Withdraw");
        withdrawbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawbtnActionPerformed(evt);
            }
        });

        cancelbtn.setText("Cancel");
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(balancelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(amountlbl)
                        .addGap(18, 18, 18)
                        .addComponent(amounttxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(withdrawbtn)
                .addGap(18, 18, 18)
                .addComponent(cancelbtn)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(balancelbl)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountlbl)
                    .addComponent(amounttxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(withdrawbtn)
                    .addComponent(cancelbtn))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void withdrawbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawbtnActionPerformed
        // TODO add your handling code here:
        try {
        double withdraw = Double.parseDouble(amounttxt.getText());
        
        if(withdraw > 0) {
        Double newBal = user.Balance - withdraw;
        
        if((user.AccountType).equals("Current")) {
            SavingsWithdrawLimit = 0;
            OverdraftLimit = 20000.0;
            InterestRate = 0.06;
        }
        else {
            SavingsWithdrawLimit = 4;
            OverdraftLimit = 5000.0;
            InterestRate = 0.04;
        }
        
        if(newBal > 0) { // if sufficient balance
            try {
                boolean flag = false;
                Statement smt = con.createStatement();
                ResultSet rs=null;
                if(SavingsWithdrawLimit == 4) { // for savings account
                    rs = smt.executeQuery("select WithdrawCount from customers where AccountNumber = "+user.AccountNumber+";");
                    if(rs.first() & rs.getInt("WithdrawCount") < 4) // checking limit reached
                        flag = true;
                }
                else {// for current account
                    flag = true;
                }
                if(flag) {  // limit not reached
                                smt = con.createStatement();
                                String update = "update customers set Balance=" + newBal + " where AccountNumber=" + user.AccountNumber + ";";
                                int number = smt.executeUpdate(update);

                                smt = con.createStatement();
                                String str = "select AccountNumber,FirstName,LastName,Balance,Password from customers where AccountNumber=" +user.AccountNumber+ ";";
                                rs = smt.executeQuery(str);

                                if(rs.first() & rs.getDouble("Balance") == newBal & number == 1) {
                                    JOptionPane.showMessageDialog(this,"Withdrawed amount "+withdraw,"Successful withdraw",JOptionPane.INFORMATION_MESSAGE);
                                    user.Balance = newBal;
                                    mn.changeBal();
                                    if(SavingsWithdrawLimit == 4) { // for savings account
                                                int num = smt.executeUpdate("update customers set WithdrawCount = (WithdrawCount + 1) where AccountNumber = "+user.AccountNumber+";");
                                    }
                                    setVisible(false);
                                }
                }
            else {  //limit reached
                    JOptionPane.showMessageDialog(this,"You have reached the monthly withdraw limit","Withdraw limit reached",JOptionPane.INFORMATION_MESSAGE);
            }
            } catch (SQLException ex) {
                                Logger.getLogger(Withdrawal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else { // If no sufficient balance
            int result = JOptionPane.showConfirmDialog(this,"Do you want to use OverDraft facility?","No Balance",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if(result == JOptionPane.YES_OPTION) { // if user uses overdraft facility
                   Double extra = newBal;
                   if((extra - extra*2) <= OverdraftLimit) {
                   extra *= (1.0+InterestRate);
                   newBal =  extra;
                                try {
                                    boolean flag = false;
                                    Statement smt = con.createStatement();
                                    ResultSet rs=null;
                                    if(SavingsWithdrawLimit == 4) { // for savings account
                                        rs = smt.executeQuery("select WithdrawCount from customers where AccountNumber = "+user.AccountNumber+";");
                                        if(rs.first() & rs.getInt("WithdrawCount") < 4) // checking limit reached
                                            flag = true;
                                    }
                                    else {// for current account
                                        flag = true;
                                    }
                                    if(flag) {  // limit not reached
                                                    smt = con.createStatement();
                                                    String update = "update customers set Balance=" + newBal + " where AccountNumber=" + user.AccountNumber + ";";
                                                    int number = smt.executeUpdate(update);

                                                    smt = con.createStatement();
                                                    String str = "select AccountNumber,FirstName,LastName,Balance,Password from customers where AccountNumber=" +user.AccountNumber+ ";";
                                                    rs = smt.executeQuery(str);

                                                    if(rs.first() & rs.getDouble("Balance") == newBal & number == 1) {
                                                        JOptionPane.showMessageDialog(this,"Withdrawed amount "+withdraw,"Successful withdraw",JOptionPane.INFORMATION_MESSAGE);
                                                        user.Balance = newBal;
                                                        mn.changeBal();
                                                        if(SavingsWithdrawLimit == 4) { // for savings account
                                                                    int num = smt.executeUpdate("update customers set WithdrawCount = (WithdrawCount + 1) where AccountNumber = "+user.AccountNumber+";");
                                                        }
                                                        setVisible(false);
                                                    }
                                    }
                                    else {  //limit reached
                                        JOptionPane.showMessageDialog(this,"You have reached the monthly withdraw limit","Withdraw limit reached",JOptionPane.INFORMATION_MESSAGE);
                                    }
                                } catch (SQLException ex) {
                                                    Logger.getLogger(Withdrawal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                    }
                   else {
                       JOptionPane.showMessageDialog(this,"Amount is more than overdraft limit","OverdraftLimit Exceeded",JOptionPane.ERROR_MESSAGE);
                   }
            }
            else if(result == JOptionPane.NO_OPTION){ // if user uses dosen't overdraft facility
                JOptionPane.showMessageDialog(this,"Insufficient Balance","Transaction Cancelled",JOptionPane.ERROR_MESSAGE);
            }
            setVisible(false);
        }
        }
        else {
            JOptionPane.showMessageDialog(this,"Withdraw ant cannot be 0 or negative","Invalid amount",JOptionPane.ERROR_MESSAGE);
        }
        }
        catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,"Please enter only numerical value","Invalid amount format",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_withdrawbtnActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_cancelbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Withdrawal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Withdrawal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Withdrawal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Withdrawal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Withdrawal().setVisible(true);
            }
        });
    }
    
    static void withdraw() {
        
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amountlbl;
    private javax.swing.JTextField amounttxt;
    private javax.swing.JLabel balancelbl;
    private javax.swing.JButton cancelbtn;
    private javax.swing.JButton withdrawbtn;
    // End of variables declaration//GEN-END:variables
}
